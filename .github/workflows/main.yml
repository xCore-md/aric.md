name: Build and Deploy to CloudPanel Server

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

# Allow only one deployment at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NODE_ENV: production
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
    steps:
      - name: ✅ Checkout code
        uses: actions/checkout@v4

      - name: 🛠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      - name: 🔒 Security Audit
        run: npm audit --audit-level=moderate

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-hash: ${{ steps.build-info.outputs.hash }}
    permissions:
      contents: read
    steps:
      - name: ✅ Checkout code
        uses: actions/checkout@v4

      - name: 🛠 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📦 Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔒 Audit dependencies
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🏗️ Build Next.js app
        run: npm run build

      - name: 🔍 Verify .next folder exists
        id: build-info
        run: |
          if [ ! -d ".next" ]; then
            echo "❌ Error: .next folder not found after build"
            exit 1
          fi
          BUILD_SIZE=$(du -sh .next | cut -f1)
          BUILD_HASH=$(find .next -type f -exec md5sum {} \; | sort -k 2 | md5sum | cut -d' ' -f1)
          echo "✅ .next folder exists with $BUILD_SIZE size"
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          
          echo "📂 Complete .next structure:"
          find .next -type f | head -20
          
          echo "📊 .next files count: $(find .next -type f | wc -l)"

      - name: 📦 Prepare deployment files (rename .next to avoid dot folder issues)
        run: |
          echo "📦 Preparing deployment files with .next renamed..."
          
          # Verify .next exists
          if [ ! -d ".next" ]; then
            echo "❌ .next does not exist!"
            exit 1
          fi
          
          echo "✅ .next exists with $(find .next -type f | wc -l) files"
          
          # Rename .next to next-build to avoid dot folder issues
          echo "🔄 Renaming .next to next-build..."
          mv .next next-build
          
          echo "✅ Renamed .next to next-build"
          echo "📊 next-build folder size: $(du -sh next-build | cut -f1)"
          echo "📊 next-build files count: $(find next-build -type f | wc -l)"
          
          # Create verification file
          echo "BUILD_VERIFICATION_$(date +%s)" > BUILD_VERIFICATION
          echo "HASH: ${{ steps.build-info.outputs.hash }}" >> BUILD_VERIFICATION
          echo "NEXT_FILES: $(find next-build -type f | wc -l)" >> BUILD_VERIFICATION
          echo "FOLDER_NAME: next-build" >> BUILD_VERIFICATION

      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: |
            next-build
            public
            package.json
            package-lock.json
            next.config.ts
            BUILD_VERIFICATION
          retention-days: 1

  deploy:
    name: Deploy to Server
    needs: [security, build]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: production
      url: https://aric.md
    permissions:
      contents: read
    steps:
      - name: 📥 Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: .

      - name: 🔍 Verify and rename next-build back to .next
        run: |
          echo "📂 Downloaded artifact contents:"
          ls -la
          
          echo "🔍 Verificare BUILD_VERIFICATION:"
          if [ -f "BUILD_VERIFICATION" ]; then
            echo "✅ Build verification found:"
            cat BUILD_VERIFICATION
          else
            echo "❌ Build verification missing!"
            exit 1
          fi
          
          echo "🔍 Verificare next-build folder:"
          if [ -d "next-build" ]; then
            echo "✅ next-build folder găsit!"
            echo "📊 Dimensiune next-build: $(du -sh next-build | cut -f1)"
            echo "📊 Numărul de fișiere: $(find next-build -type f | wc -l)"
            
            # Rename back to .next
            echo "🔄 Renaming next-build back to .next..."
            mv next-build .next
            
            echo "✅ Successfully renamed to .next"
            echo "📂 Final .next structure (primele 15 files):"
            find .next -type f | head -15
          else
            echo "❌ next-build folder NU a fost găsit în artifact!"
            echo "📋 Toate files disponibile:"
            find . -type f | head -20
            echo "📋 Toate directories disponibile:"
            find . -type d | head -10
            exit 1
          fi

      - name: 🔍 Pre-transfer verification
        run: |
          echo "🔍 Final verification before transfer:"
          echo "📂 All files to be transferred:"
          ls -la .next public package.json package-lock.json next.config.ts BUILD_VERIFICATION
          echo "📊 .next folder size: $(du -sh .next | cut -f1)"
          echo "📊 .next files count: $(find .next -type f | wc -l)"

      - name: 📦 Create deployment archive on runner
        run: |
          echo "📦 Creating deployment archive for direct transfer..."
          tar -czf deployment-complete.tar.gz .next/ public/ package.json package-lock.json next.config.ts BUILD_VERIFICATION
          echo "✅ Archive created, size: $(du -sh deployment-complete.tar.gz | cut -f1)"

      - name: 📂 Transfer archive to server via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "deployment-complete.tar.gz"
          target: "/home/aric/htdocs/aric.md/"
          timeout: 300s
          command_timeout: 10m

      - name: 📦 Extract archive on server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/aric/htdocs/aric.md
            
            # Remove old files
            rm -rf .next public package.json package-lock.json next.config.ts BUILD_VERIFICATION 2>/dev/null || true
            
            # Extract new deployment
            if [ -f "deployment-complete.tar.gz" ]; then
              echo "✅ Archive found, extracting..."
              tar -xzf deployment-complete.tar.gz
              rm deployment-complete.tar.gz
              
              echo "📂 Extracted contents:"
              ls -la
              
              if [ -d ".next" ]; then
                echo "✅ .next folder successfully extracted!"
                echo "📊 .next size: $(du -sh .next | cut -f1)"
                echo "📊 .next files: $(find .next -type f | wc -l)"
              else
                echo "❌ .next still missing after extraction!"
                exit 1
              fi
            else
              echo "❌ deployment-complete.tar.gz not found!"
              exit 1
            fi

      - name: 🚀 Executare deploy script pe server
        id: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          timeout: 300s
          command_timeout: 10m
          script: |
            set -euo pipefail
            echo "🏷️ Deploy hash: ${{ needs.build.outputs.build-hash }}"
            chmod +x /home/aric/htdocs/aric.md/deploy.sh
            /home/aric/htdocs/aric.md/deploy.sh

      - name: ✅ Deploy Success Notification
        if: success()
        run: |
          echo "🎉 Deploy successful!"
          echo "Build hash: ${{ needs.build.outputs.build-hash }}"
          echo "Deployed to: https://aric.md"

      - name: ❌ Deploy Failure Notification
        if: failure()
        run: |
          echo "💥 Deploy failed!"
          echo "Check logs above for details"
